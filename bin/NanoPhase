#!/bin/bash
## NanoPhase is designed for generating metagenome-assembled genomes (MAGs) from Nanopore metagenomic sequencing data or hybrid strategy
set -eo pipefail


###### Usage ######
show_help(){
cat << EOF

`echo "NanoPhase v=$VERSION"`

arguments:
	--check			check the package availability
	--long_read_only	only Nanopore long reads were involved [default: on]
	--hybrid		both short and long reads were required [Optional]
	-l, --long		Nanopore reads: fasta/q file that basecalled by Guppy 5+ or using 20+ chemistry was recommended if only Nanopore reads were included [Mandatory]
	-1			Illumina short reads: fasta/q paired-end #1 file [Optional]
	-2			Illumina short reads: fasta/q paired-end #2 file [Optional]
	-m, --medaka_model	medaka model used for medaka polishing [default: r941_min_hac_g507]
	-t, --threads		Number of threads that used for assembly and polishing [default: 16]
	-o, --out		Output directory [default: ./NanoPhase-out]
	-h, --help		Print help information and exit
	-v, --version		Show version number and exit

output sub-folders:
        01-LongAssemblies       Sub-folder containing information of Nanopore long-read assemblies (assembler: metaFlye)
        02-LongBins             Sub-folder containing the initial bins with relatively low-accuracy quality
        03-Polishing            Sub-folder containing polished bins

example usage:
	NanoPhase --check ## package availability checking
        Nanophase -l ont.fastq -t 16 -o NanoPhase-out ## long reads only
        Nanophase -l ont.fastq --hybrid -1 sr_1.fastq -2 sr_2.fastq -t 16 -o NanoPhase-out ## hybrid strategy

EOF
}
## default parameters
OPTIND=1 # Reset in case getopts has been used previously in the shell

N_threads="16"
Type="long_read_only"
ONT_seqs=""
#SR1_seqs=""
#SR2_seqs=""
CRTDIR=$(cd `dirname $0`; pwd)
OutDIR="NanoPhase-out"
check_pkg="false"
medaka_model="r941_min_hac_g507"
VERSION="0.1.0"

## call command line 
echo -e "\nCommand line: $CRTDIR/NanoPhase $*\n" >&2
##
params="$(getopt -o hl:1:2:t:o:m:v --long help,hybrid,long:,long-read-only,threads:,medaka_model:,out:,check,version -- "$@")"
if [[ $? -gt 0 ]]; then show_help; exit 1; fi
if [[ $# == 0 ]]; then show_help; exit 1; fi

#eval set -- "$params"
#unset params

while true; do
	case "$1" in
		-1) SR1_seqs=$2; shift 2;;
		-2) SR2_seqs=$2; shift 2;;
		-l | --long) ONT_seqs=$2; shift 2;;
		-t | --threads) N_threads=$2; shift 2;;
		-o | --out) OutDIR=$2; shift 2;;
		-m | --medaka_model) medaka_model=$2; shift 2;;
		-v | --version) echo "NanoPhase v=$VERSION"; exit 0; shift; break;;
		--hybrid) Type=hybrid; shift 1;;
		--long-read-only) Type=long_read_only; shift 1;;
		-h | --help) show_help; exit 0; shift 1;;
		--) show_help; exit 0; shift; break ;;
		*) break;;
	esac
done

if [[ $check_pkg == false ]]; then
# Make sure the necessary files exist, if required variables are not setup, show help information and exit
long_read_check(){
if [[ ! -f "$ONT_seqs" ]]; then 
	echo -e "The Nanopore long-read file seems not exist, which is essential. Please type 'NanoPhase -h' for help\n";
	exit 1
else
	echo "Nanopore long-read file has been provided"
	if [[ $ONT_seqs == *fasta ]] || [[ $ONT_seqs == *fa ]]; then
		lr_suffix=fa
	else
		if [[ $ONT_seqs == *fastq ]] || [[ $ONT_seqs == *fq ]]; then
			lr_suffix=fq
		else
			echo "Please check the type of input Nanopore long-read file and its name extension should be: fastq, fq, fasta or fa"
		fi
	fi
fi
}

#shift $((OPTIND - 1))

printf "\n"
echo "===========================================================================================================
NanoPhase starts @`date "+%Y/%m/%d -- %H:%M:%S"`"
printf "\n"

package_check(){
### Software availability
echo "===========================================================================================================
Check software availability and locations" ## should check unavailable: if xxx then echo ""; exit 1
mkdir -p $OutDIR && rm -rf $OutDIR/.package.installed 2>/dev/null && rm -rf $OutDIR/.package.not.installed 2>/dev/null

#touch $OutDIR/.package.installed && touch $OutDIR/.package.not.installed
echo -e "NanoPhase\nflye\nmetabat2\nrun_MaxBin.pl\nmetawrap\ncheckm\nracon\nmedaka\npolypolish\npolca.sh\nbwa\nseqtk\nminimap2\nstats.sh\nparallel\nperl\nsamtools" | while read package; do
if [[ "$(command -v $package)" ]]; then
	echo -e "$package\t`which $package`" | sed -e 's/polca.sh/POLCA/1' -e 's/run_MaxBin.pl/maxbin2/1' -e 's/stats.sh/BBMap/g' | awk '{printf "%-20s %s\n", $1,$2}' >> $OutDIR/.package.installed
else
	echo "$package" | sed -e 's/polca.sh/POLCA/1' -e 's/run_MaxBin.pl/maxbin2/1' -e 's/stats.sh/BBMap/g' | awk '{printf "%-20s %s\n", $1,$2}' >> $OutDIR/.package.not.installed
fi ; done

if [[ -s $OutDIR/.package.installed ]]; then
	echo "===========================================================================================================
	The following packages have been found  @`date "+%Y/%m/%d -- %H:%M:%S"`"
	cat $OutDIR/.package.installed | sed -e '1i#package\tlocation' | awk '{printf "%-20s %s\n", $1,$2}'
	echo "==========================================================================================================="
else
	echo "No required package has been found in the environment, please install, terminating..."
	exit 1
fi

if [[ ! -s $OutDIR/.package.not.installed ]]; then
	echo "All required packages have been found in the environment"
	path_check=`cat  $OutDIR/.package.installed | awk '{printf "%-20s %s\n", $1,$2}' | awk '{print $2}' | while read path; do dirname $path; done | awk '!a[$1]++' | wc -l`
	if [[ $path_check -gt 1 ]]; then
		echo "Warning: [`cat  $OutDIR/.package.installed | awk '{printf "%-20s %s\n", $1,$2}' | awk '{print $2}' | while read path; do dirname $path; done | grep -v 'NanoPhase\/bin' | while read line; do grep -w $line $OutDIR/.package.installed; done | awk '!a[$1]++ {print $1}' | tr '\n' ' ' | sed -e 's/ $//g'`] has not been installed in the [NanoPhase] env. Strongly recommend intalling all packages in the NanoPhase env, or it may result in a failure"
		rm -rf  $OutDIR/.package.installed
	else
		rm -rf $OutDIR/.package.installed 2>/dev/null
	fi
else
	echo "Error: [`cat $OutDIR/.package.not.installed | sed -e 's/ //g' | tr '\n' ' ' | sed -e 's/ $//g'`] cannot be found in the environment, plase install. Now terminating..."
	rm -rf $OutDIR/.package.not.installed
	exit 1
fi
}

long_read_only_strategy(){
### long-read assembly
long_read_assembly(){
	if [[ $N_threads -gt 128 ]]; then
		flye_threads=128
	else
		flye_threads=$N_threads
	fi

	rm -rf $OutDIR/01-LongAssemblies
        flye --meta --nano-hq $ONT_seqs -t $flye_threads -i 2 -g 5m -o $OutDIR/01-LongAssemblies
	
	if [ -f $OutDIR/01-LongAssemblies/assembly.fasta -a -f $OutDIR/01-LongAssemblies/assembly_info.txt ]; then
		echo "===========================================================================================================
		long-read assembly finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		Something wrong with long-read assembly, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

if [ -f $OutDIR/01-LongAssemblies/assembly.fasta -a -f $OutDIR/01-LongAssemblies/assembly_info.txt ]; then
	echo "===========================================================================================================
	long-read assembly has been found in the folder: $OutDIR/01-LongAssemblies/. Now go to the next stage: generating LongBins... @`date "+%Y/%m/%d -- %H:%M:%S"`
	Note: plese ensure flye assembly finished sucessfully in the previous run, if not, please remove this folder using the command 'rm -rf $OutDIR/$OutDIR/01-LongAssemblies/' and re-run NanoPhase command" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/01-LongAssemblies ]]; then
		echo "===========================================================================================================
		Long-read assembly re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		if [[ -d $OutDIR ]]; then
			echo "===========================================================================================================
			Long-read assembly re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		else
			echo "===========================================================================================================
			Long-read assembly starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			mkdir -p $OutDIR
		fi
	fi
	long_read_assembly
fi

### Initial Bins
## metabat
metabat_binning(){
	grep '^>' $OutDIR/01-LongAssemblies/assembly.fasta | sed -e 's/^>//g' | while read line; do grep -w $line $OutDIR/01-LongAssemblies/assembly_info.txt ; done | cut -f1,3 > $OutDIR/02-LongBins/INITIAL_BINNING/tmp.abun.txt
	sed -e '1i#seq_name\tcov' $OutDIR/02-LongBins/INITIAL_BINNING/tmp.abun.txt > $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2_abun.txt
	metabat2 -t $N_threads -i $OutDIR/01-LongAssemblies/assembly.fasta -o $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2-bins/bin -a $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2_abun.txt --cvExt >$OutDIR/02-LongBins/INITIAL_BINNING/metabat2/bin.log

	if [ -s $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/bin.log ]; then
		str_check=`grep "formed" $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/bin.log | wc -l`
		if [[ $str_check == 1 ]]; then
			echo "===========================================================================================================
			`cat $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/bin.log`
			metabat2 binning finished @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		else
			echo "===========================================================================================================
			Something wrong with metabat2 binning, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			exit 1
		fi
	fi
}

str_metabat2=`grep "formed" $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/bin.log 2>/dev/null | wc -l`
if [ -s $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/bin.log ] && [[ $str_metabat2 == 1 ]] && [[ -s $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2-bins/bin.1.fa ]]; then
	echo "===========================================================================================================
	metabat2 bins have been found in the folder: $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2-bins/. Now go to the next stage: maxbin2 binning... @`date "+%Y/%m/%d -- %H:%M:%S"`
	Note: please ensure metabat2 binning finished sucessfully in the previous run, if not, please remove this folder using the command 'rm -rf $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2-bins/' and re-run NanoPhase command" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/02-LongBins/INITIAL_BINNING/metabat2 ]]; then
		echo "===========================================================================================================
		metabat2 binning re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/*
	else
		if [[ -d $OutDIR/02-LongBins/INITIAL_BINNING ]]; then
			echo "===========================================================================================================
			metabat2 binning re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		else
			echo "===========================================================================================================
			Initial binning starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			if [[ -d $OutDIR/02-LongBins ]]; then
				echo "===========================================================================================================
				Initial binning re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			else
				echo "===========================================================================================================
				metabat2 binning starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
				mkdir -p $OutDIR/02-LongBins
			fi
			mkdir -p $OutDIR/02-LongBins/INITIAL_BINNING
		fi
		mkdir -p $OutDIR/02-LongBins/INITIAL_BINNING/metabat2
	fi
	metabat_binning
fi

## maxbin
maxbin_binning(){
	cp $OutDIR/02-LongBins/INITIAL_BINNING/tmp.abun.txt $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2_abun.txt
	run_MaxBin.pl -thread $N_threads -contig $OutDIR/01-LongAssemblies/assembly.fasta -abund $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2_abun.txt -out $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/bin
	mkdir -p $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins
	mv $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/bin*fasta $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins/

	if [ -s $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/bin.log ]; then
		str_check=`grep "Job finished" $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/bin.log | wc -l`
		 if [[ $str_check == 1 ]] && [[ -s $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins/bin.001.fasta ]]; then
			 echo "===========================================================================================================
			 maxbin2 binning finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		 else
			 echo "===========================================================================================================
			 Something wrong with maxbin binning, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			 exit 1; >&2
		 fi
	 else
		  echo "===========================================================================================================
		  Something wrong with maxbin binning, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		  exit 1; >&2
	 fi
}

str_maxbin2=`grep "Job finished" $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/bin.log 2>/dev/null | wc -l`
if [ -s $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/bin.log ] && [[ $str_maxbin2 == 1 ]] && [[ -s $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins/bin.001.fasta ]]; then
	echo "===========================================================================================================
	maxbin2 bins have been found in the folder $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins/. Now go to the next stage: bin refinement... @`date "+%Y/%m/%d -- %H:%M:%S"`
	Note: please ensure maxbin2 binning finished sucessfully in the previous run, if not, please remove this folder using the command 'rm -rf $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins/' and re-run NanoPhase command" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2 ]]; then
		echo "===========================================================================================================
		maxbin2 binning re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/*
	else
		echo "===========================================================================================================
		maxbin2 binning starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2
	fi
	maxbin_binning
fi

## metawarp bin_refinement
bin_refinement(){
	metawrap bin_refinement -o $OutDIR/02-LongBins/BIN_REFINEMENT -c 50 -x 10 -t $N_threads -A $OutDIR/02-LongBins/INITIAL_BINNING/metabat2/metabat2-bins/ -B $OutDIR/02-LongBins/INITIAL_BINNING/maxbin2/maxbin2-bins/
	# if biopython error, may try python3
	Fin_Num_refineBins=`ls $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins/bin.*.fa 2>/dev/null | wc -l`
	if [[ -s $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins.stats ]] && [[ `tail -n+2 $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins.stats | wc -l` == $Fin_Num_refineBins ]]; then
		echo "===========================================================================================================
		bin refinement finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		Something wrong with bin refinement, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

Num_refineBins=`ls $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins/bin.*.fa  2>/dev/null | wc -l`
if [[ -s $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins.stats ]] && [[ `tail -n+2 $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins.stats | wc -l` == $Num_refineBins ]]; then
	echo "===========================================================================================================
	bins after refinement have been found in the folder $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins/. Now go to the next stage: long-read polishing: combine refined bins... @`date "+%Y/%m/%d -- %H:%M:%S"`
	Note: please ensure bin refinement finished sucessfully in the previous run, if not, please remove this folder using the command 'rm -rf $OutDIR/02-LongBins/BIN_REFINEMENT/' and re-run NanoPhase command" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/02-LongBins/BIN_REFINEMENT ]]; then
		echo "===========================================================================================================
		bin refinement re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/02-LongBins/BIN_REFINEMENT/*
	else
		echo "===========================================================================================================
		bin refinement starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/02-LongBins/BIN_REFINEMENT
	fi
	bin_refinement
fi

### long-read polishing
## 03-Polishing
## Preparation
prepare(){
	mkdir -p $OutDIR/03-Polishing/rename-bins
	ls $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins/bin.*fa | awk -F"/" '{print $NF}' | sed -e 's/.fa//g' | sort -t. -k2n > $OutDIR/03-Polishing/binIDs
	cat $OutDIR/03-Polishing/binIDs | while read line; do sed -e 's/^>/>'${line}_'/g' $OutDIR/02-LongBins/BIN_REFINEMENT/metawrap_50_10_bins/${line}.fa > $OutDIR/03-Polishing/rename-bins/${line}.fa ; done
	cat $OutDIR/03-Polishing/rename-bins/bin.*fa > $OutDIR/03-Polishing/flye_assembled.bins.fasta
	
	if [[ -s $OutDIR/03-Polishing/flye_assembled.bins.fasta ]]; then
		echo "===========================================================================================================
		long-read candidate bins combined sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		Something wrong with combining long-read candidate bins, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

if [[ -s $OutDIR/03-Polishing/flye_assembled.bins.fasta ]]; then
	echo "===========================================================================================================
	refined bins have been combined. Now go to the next stage: generating LongSeqs clusters of candidate bins... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing ]]; then
		echo "===========================================================================================================
		long-read polishing re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/*
	else
		echo "===========================================================================================================
		long-read polishing starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing
	fi
	prepare
fi

## LongSeqs
LongCluster(){
	minimap2 -x map-ont -t $N_threads $OutDIR/03-Polishing/flye_assembled.bins.fasta $ONT_seqs > $OutDIR/03-Polishing/flye_bins-mapping.lr.paf
	awk '!a[$1]++' $OutDIR/03-Polishing/flye_bins-mapping.lr.paf | awk -F'[:\t]' '($4-$3+1)/$2 >=0.90 && $27<0.10 {print $1"\t"$6}' > $OutDIR/03-Polishing/filtered_90_90-lr.paf
	cat $OutDIR/03-Polishing/binIDs | while read line; do echo "grep ${line}_contig $OutDIR/03-Polishing/filtered_90_90-lr.paf | awk '{print \$1}' > $OutDIR/03-Polishing/LongSeqs/${line}-lr.IDs"; done > $OutDIR/03-Polishing/tmp.lr-extra-IDs.cmd
	chmod +x $OutDIR/03-Polishing/tmp.lr-extra-IDs.cmd && parallel -j$N_threads -k < $OutDIR/03-Polishing/tmp.lr-extra-IDs.cmd
	cat $OutDIR/03-Polishing/binIDs | while read line; do echo "seqtk subseq $ONT_seqs $OutDIR/03-Polishing/LongSeqs/${line}-lr.IDs > $OutDIR/03-Polishing/LongSeqs/${line}-lr.${lr_suffix}"; done  > $OutDIR/03-Polishing/tmp.seqtk-lr.cmd
	if [[ $N_threads -gt 15 ]]; then
		chmod +x $OutDIR/03-Polishing/tmp.seqtk-lr.cmd && parallel -j15 -k < $OutDIR/03-Polishing/tmp.seqtk-lr.cmd # reduce the I/O burden
	else
		chmod +x $OutDIR/03-Polishing/tmp.seqtk-lr.cmd && parallel -j$N_threads -k < $OutDIR/03-Polishing/tmp.seqtk-lr.cmd
	fi
	rm -rf $OutDIR/03-Polishing/*lr.paf && rm -rf $OutDIR/03-Polishing/tmp.seqtk-lr.cmd
	
	Fin_Num_LongSeq=`find $OutDIR/03-Polishing/LongSeqs/ -name "*${lr_suffix}" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	if [[ $Fin_Num_LongSeq == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]]; then
		echo "===========================================================================================================
		LongSeqs clustering finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		Something wrong with LongSeqs clustering, terminating ... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi	
}

Num_LongSeq=`find $OutDIR/03-Polishing/LongSeqs/ -name "*${lr_suffix}" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
if [[ $Num_LongSeq == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]]; then
	echo "===========================================================================================================
	LongSeq clusters have been generated. Now go to the next stage: racon polishing... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/LongSeqs ]]; then
		echo "===========================================================================================================
		LongSeqs clustering re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/LongSeqs/*
	else
		echo "===========================================================================================================
		LongSeqs clustering starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing/LongSeqs
	fi
	LongCluster
fi

## racon polishing
racon_polishing(){
	if [[ $N_threads -gt 20 ]]; then
		racon_threads=20
		let racon_t=($N_threads+10)/20
		racon_para=$racon_t
	else
		racon_threads=$N_threads
		racon_para=1
	fi

	cat $OutDIR/03-Polishing/binIDs | while read line; do
	echo "mkdir -p $OutDIR/03-Polishing/Racon/${line} && minimap2 -x map-ont -d $OutDIR/03-Polishing/rename-bins/${line}.fa.mni $OutDIR/03-Polishing/rename-bins/${line}.fa && minimap2 -ax map-ont -t $racon_threads $OutDIR/03-Polishing/rename-bins/${line}.fa.mni $OutDIR/03-Polishing/LongSeqs/${line}-lr.${lr_suffix} > $OutDIR/03-Polishing/Racon/${line}/overlaps.racon1.sam && racon -t $racon_threads $OutDIR/03-Polishing/LongSeqs/${line}-lr.${lr_suffix} $OutDIR/03-Polishing/Racon/${line}/overlaps.racon1.sam $OutDIR/03-Polishing/rename-bins/${line}.fa  > $OutDIR/03-Polishing/Racon/${line}/${line}-racon01.fasta && rm -rf $OutDIR/03-Polishing/rename-bins/${line}.fa.* && rm -rf $OutDIR/03-Polishing/Racon/${line}/overlaps.racon1.sam"; done > $OutDIR/03-Polishing/tmp.racon.cmd
	chmod +x $OutDIR/03-Polishing/tmp.racon.cmd && parallel -j$racon_para -k < $OutDIR/03-Polishing/tmp.racon.cmd
	rm -rf $OutDIR/03-Polishing/tmp.racon.cmd 
	
	Fin_Num_racon_bin=`find $OutDIR/03-Polishing/Racon/ -name "*racon01.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	if [[ $Fin_Num_racon_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]]; then
		echo "===========================================================================================================
		racon polishing finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		echo "*************************************************
		racon parallel: $racon_para; racon threads: $racon_threads" ## should delete, only used in the test
	else
		echo "===========================================================================================================
		Something wrong with racon polishing, terminating...  @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
		fi
}

Num_racon_bin=`find $OutDIR/03-Polishing/Racon/ -name "*racon01.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
if [[ $Num_racon_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]]; then
	echo "===========================================================================================================
	racon polishing has been finished. Now go to the next stage: medaka polishing... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/Racon ]]; then
		echo "===========================================================================================================
		racon polishing re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/Racon/*
	else
		echo "===========================================================================================================
		racon polishing starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing/Racon
	fi
	racon_polishing
fi

## medaka polishing
medaka_polishing(){
	if [[ $N_threads -gt 4 ]]; then
		medaka_threads=2
		#medaka_para=`echo -e "$N_threads/2"|bc`
		let medaka_p=$N_threads/2
		medaka_para=$medaka_p
	else
		medaka_threads=$N_threads
		medaka_para=1
	fi

	cat $OutDIR/03-Polishing/binIDs | while read line; do
	echo "medaka_consensus -m $medaka_model -i $OutDIR/03-Polishing/LongSeqs/${line}-lr.${lr_suffix} -d $OutDIR/03-Polishing/rename-bins/${line}.fa -o $OutDIR/03-Polishing/medaka/${line}-medaka -t $medaka_threads && rm -rf $OutDIR/03-Polishing/medaka/${line}-medaka/calls_to* && rm -rf $OutDIR/03-Polishing/medaka/${line}-medaka/consensus_probs.hdf && rm -rf $OutDIR/03-Polishing/medaka/${line}-medaka/consensus.fasta.gaps_in_draft_coords.bed"; done > $OutDIR/03-Polishing/tmp.medaka.cmd
	chmod +x $OutDIR/03-Polishing/tmp.medaka.cmd && parallel -j$medaka_para -k <$OutDIR/03-Polishing/tmp.medaka.cmd
	rm -rf $OutDIR/03-Polishing/tmp.medaka.cmd

	Fin_Num_medaka_bin=`find $OutDIR/03-Polishing/medaka/ -name "consensus.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	if [[ $Fin_Num_medaka_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] ; then
		echo "===========================================================================================================
		medaka polishing finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		echo "*****************************************************
		medaka parallel: $medaka_para; medaka threads: $medaka_threads" ## should delete, only used in the test
	else
		echo "===========================================================================================================
		Something wrong with medaka polishing, terminating...  @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1
	fi
}

Num_medaka_bin=`find $OutDIR/03-Polishing/medaka/ -name "consensus.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
if [[ $Num_medaka_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] ; then
	if [[ $Type == hybrid ]]; then
		echo "===========================================================================================================
		medaka polishing has been finished. Now go to the next stage: polypolish polishing @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		medaka polishing has been finished. Now go to the next stage: bin quality assessement @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	fi

else
	if [[ -d $OutDIR/03-Polishing/medaka ]]; then
		echo "===========================================================================================================
		medaka polishing re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/medaka/*
	else
		echo "===========================================================================================================
		medaka polishing starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing/medaka/
	fi
	medaka_polishing
fi
}

## checkm: genome quality evaluation
long_read_only_genome_stats(){
genome_stats(){
	cat $OutDIR/03-Polishing/binIDs | while read line; do cp $OutDIR/03-Polishing/medaka/${line}-medaka/consensus.fasta $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins/${line}.medaka.fasta; done
	checkm lineage_wf -x fasta -t $N_threads $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins $OutDIR/03-Polishing/Final-bins/checkm-output >$OutDIR/03-Polishing/Final-bins/checkm.log
	sed -n '/------------/,$p' $OutDIR/03-Polishing/Final-bins/checkm.log | tail -n+4 | head -n -1 | awk '{print $1"\t"$13"\t"$14"\t"$15}' | awk '$2>=50 && $3<=10' > $OutDIR/03-Polishing/Final-bins/tmp.genome.completeness
	sed -n '/------------/,$p' $OutDIR/03-Polishing/Final-bins/checkm.log | tail -n+4 | head -n -1 | awk '{print $1"\t"$13"\t"$14"\t"$15}' | awk '$2>=50 && $3<=10 {print $1}' | while read line; do stats.sh $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins/${line}.fasta format=6 | grep -v "#" | awk '{print $3"\t"$1"\t"$9"\t"$18}'; done > $OutDIR/03-Polishing/Final-bins/tmp.genome-stats

	## check BBMap
        if [[ ! -s $OutDIR/03-Polishing/Final-bins/tmp.genome-stats ]]; then
                echo "===========================================================================================================
                Something wrong with BBMap::stats.sh, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
                exit 1
        fi

	sed -n '/------------/,$p' $OutDIR/03-Polishing/Final-bins/checkm.log | tail -n+4 | head -n -1 | awk '{print $1"\t"$13"\t"$14"\t"$15}' | awk '$2>=50 && $3<=10 {print $1}' | while read line; do mv $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins/${line}.fasta $OutDIR/03-Polishing/Final-bins/ ; done
	paste $OutDIR/03-Polishing/Final-bins/tmp.genome.completeness $OutDIR/03-Polishing/Final-bins/tmp.genome-stats | sort -t. -k2n | sed -e 's/.medaka//g' > $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary
	## extract circular Info from flye assemblies
	cat $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary | awk '{print $1"\t"$6}' | while read binID N_Contig; do
	if [[ $N_Contig == 1 ]]; then
		grep "^>" $OutDIR/03-Polishing/Final-bins/${binID}.medaka.fasta | cut -d_ -f2-3 | while read ContigID; do grep -w $ContigID $OutDIR/01-LongAssemblies/assembly_info.txt ; done | awk '{print $4}' | while read CirInfo; do
		if [[ $CirInfo == Y ]]; then 
			echo "Y"
		else
			echo "N"
		fi; done
	else
		echo "N"
	fi; done | paste $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary - | sed -e '1i#BinID\tCompleteness\tContamination\tStrain heterogeneity\tGenomeSize(bp)\tN_Contig\tN50(bp)\tGC\tIfCir.' > $OutDIR/03-Polishing/NanoPhase.ont.genome.summary
	# clean up and rename
	rm -rf $OutDIR/03-Polishing/Final-bins/tmp* && rm -rf $OutDIR/03-Polishing/Final-bins/checkm* && rm -rf $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary 
	rename 's/medaka\.fasta/fasta/' $OutDIR/03-Polishing/Final-bins/*fasta
	
	Fin_Num_final_bins=`ls -lht $OutDIR/03-Polishing/Final-bins/*fasta 2>/dev/null | awk '$5!=0' | wc -l`
	if [[ -s $OutDIR/03-Polishing/NanoPhase.ont.genome.summary ]] && [[ $Fin_Num_final_bins == `tail -n+2 $OutDIR/03-Polishing/NanoPhase.ont.genome.summary | wc -l | awk '{print $1}'` ]]; then
		echo "===========================================================================================================
		Genome statistics finished @`date "+%Y/%m/%d -- %H:%M:%S"`
		Final bins could be found in $OutDIR/03-Polishing/Final-bins/
		and bin summary file is $OutDIR/03-Polishing/NanoPhase.ont.genome.summary" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		Something wrong with genome statistics of medaka-polished bins, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

Num_final_bins=`ls -lht $OutDIR/03-Polishing/Final-bins/*fasta 2>/dev/null | awk '$5!=0' | wc -l`
if [[ -s $OutDIR/03-Polishing/NanoPhase.ont.genome.summary ]] && [[ $Num_final_bins == `tail -n+2 $OutDIR/03-Polishing/NanoPhase.ont.genome.summary | wc -l | awk '{print $1}'` ]]; then
	echo "===========================================================================================================
	Seems genome quality summary file has been prepared in $OutDIR/03-Polishing/NanoPhase.ont.genome.summary and
	Final genomes could be found in $OutDIR/03-Polishing/Final-bins/
	If you want to re-run this step, please first remove [Fina-bins and summary file] by 'rm -rf $OutDIR/03-Polishing/Fina-bins' && rm -rf $OutDIR/03-Polishing/NanoPhase.ont.genome.summary" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins ]]; then
		echo "===========================================================================================================
		re-prepare medaka polished bins for checkm evaluation @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins/*
	else
		if [[ -d $OutDIR/03-Polishing/Final-bins/ ]]; then
			echo "===========================================================================================================
			re-prepare medaka polished bins for checkm evaluation @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			rm -rf $OutDIR/03-Polishing/Final-bins/*
		else
			echo "===========================================================================================================
			prepare medaka polished bins for checkm evaluation @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			mkdir -p $OutDIR/03-Polishing/Final-bins/
		fi
		mkdir -p $OutDIR/03-Polishing/Final-bins/tmp-medaka-bins
	fi
	genome_stats
fi
}

## add short-read polishing: polypolish and polca
sr_polypolish_polca_polishing(){
ShortCluster(){
	minimap2 -x sr -t $N_threads $OutDIR/03-Polishing/flye_assembled.bins.fasta $SR1_seqs $SR2_seqs > $OutDIR/03-Polishing/flye_bins-mapping.sr.paf
	awk '!a[$1]++' $OutDIR/03-Polishing/flye_bins-mapping.sr.paf | awk '($4-$3+1)/$2 >=0.90 && $10/$11 >=0.90 {print $1"\t"$6}' > $OutDIR/03-Polishing/filtered_90_90-sr.paf
	cat  $OutDIR/03-Polishing/binIDs | while read line; do echo "grep ${line}_contig $OutDIR/03-Polishing/filtered_90_90-sr.paf | awk '{print \$1}' > $OutDIR/03-Polishing/ShortSeqs/${line}-sr.IDs"; done > $OutDIR/03-Polishing/tmp.sr-extra-IDs.cmd
	chmod +x $OutDIR/03-Polishing/tmp.sr-extra-IDs.cmd && parallel -j$N_threads -k < $OutDIR/03-Polishing/tmp.sr-extra-IDs.cmd
	cat $OutDIR/03-Polishing/binIDs | while read line; do echo "seqtk subseq $SR1_seqs $OutDIR/03-Polishing/ShortSeqs/${line}-sr.IDs > $OutDIR/03-Polishing/ShortSeqs/${line}-sr_1.${sr_suffix}"; done > $OutDIR/03-Polishing/tmp.seqtk-sr_1.cmd
	cat $OutDIR/03-Polishing/binIDs | while read line; do echo "seqtk subseq $SR2_seqs $OutDIR/03-Polishing/ShortSeqs/${line}-sr.IDs > $OutDIR/03-Polishing/ShortSeqs/${line}-sr_2.${sr_suffix}"; done > $OutDIR/03-Polishing/tmp.seqtk-sr_2.cmd
	chmod +x $OutDIR/03-Polishing/tmp.seqtk-sr_*.cmd

	if [[ $N_threads -gt 15 ]]; then
		parallel -j15 -k < $OutDIR/03-Polishing/tmp.seqtk-sr_1.cmd && parallel -j15 -k < $OutDIR/03-Polishing/tmp.seqtk-sr_2.cmd
	else
		parallel -j$N_threads -k < $OutDIR/03-Polishing/tmp.seqtk-sr_1.cmd && parallel -j$N_threads -k < $OutDIR/03-Polishing/tmp.seqtk-sr_2.cmd
	fi

	rm -rf $OutDIR/03-Polishing/*sr.paf && rm -rf $OutDIR/03-Polishing/tmp.seqtk-sr*cmd && rm -rf $OutDIR/03-Polishing/tmp.*extra-IDs.cmd
	
	Fin_Num_ShortSeq1=`find $OutDIR/03-Polishing/ShortSeqs/ -name "*_1.${sr_suffix}" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	Fin_Num_ShortSeq2=`find $OutDIR/03-Polishing/ShortSeqs/ -name "*_2.${sr_suffix}" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	if [[ $Fin_Num_ShortSeq1 == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] && [[ $Fin_Num_ShortSeq2 == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]]; then
		echo "===========================================================================================================
		ShortSeqs clustering finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
	else
		echo "===========================================================================================================
		Something wrong with ShortSeqs clustering, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

Num_ShortSeq1=`find $OutDIR/03-Polishing/ShortSeqs/ -name "*_1.${sr_suffix}" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
Num_ShortSeq2=`find $OutDIR/03-Polishing/ShortSeqs/ -name "*_2.${sr_suffix}" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
if [[ $Num_ShortSeq1 == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] && [[ $Num_ShortSeq2 == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]]; then
	echo "===========================================================================================================
	Both ShortSeq1 and ShortSeq2 clusters have been generated. Now go to the next stage: polypolish polishing... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/ShortSeqs ]]; then
		echo "===========================================================================================================
		ShortSeqs clustering re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/ShortSeqs/*
	else
		echo "===========================================================================================================
		ShortSeqs clustering starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing/ShortSeqs
	fi
	ShortCluster
fi

## polypolish polishing
polypolish_polishing(){
	if [[ $N_threads -gt 20 ]]; then
		polypolish_threads=20
		let polypolish_p=($N_threads+10)/20
		polypolish_para=$polypolish_p
	else
		polypolish_threads=$N_threads
		polypolish_para=1
	fi

	cat $OutDIR/03-Polishing/binIDs | while read line; do mkdir -p $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/; done
	cat $OutDIR/03-Polishing/binIDs | while read line; do
	echo -e "bwa index $OutDIR/03-Polishing/medaka/${line}-medaka/consensus.fasta && bwa mem -t $polypolish_threads -a $OutDIR/03-Polishing/medaka/${line}-medaka/consensus.fasta $OutDIR/03-Polishing/ShortSeqs/${line}-sr_1.${sr_suffix} > $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_alignments_1.sam && bwa mem -t $polypolish_threads -a $OutDIR/03-Polishing/medaka/${line}-medaka/consensus.fasta $OutDIR/03-Polishing/ShortSeqs/${line}-sr_2.${sr_suffix} > $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_alignments_2.sam && polypolish_insert_filter.py --in1 $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_alignments_1.sam --in2 $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_alignments_2.sam --out1 $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_filtered_1.sam --out2 $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_filtered_2.sam && polypolish $OutDIR/03-Polishing/medaka/${line}-medaka/consensus.fasta $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_filtered_1.sam $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_filtered_2.sam > $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}-polypolish.fasta && rm -rf $OutDIR/03-Polishing/Polypolish/${line}-Polypolish/${line}_*.sam"; done > $OutDIR/03-Polishing/tmp.sr-polypolish.cmd
	chmod +x $OutDIR/03-Polishing/tmp.sr-polypolish.cmd && parallel -j$polypolish_para -k < $OutDIR/03-Polishing/tmp.sr-polypolish.cmd
	rm -rf $OutDIR/03-Polishing/tmp.sr-polypolish.cmd ## clean up
	find $OutDIR/03-Polishing/medaka/ -name consensus.fasta.* | while read line; do rm -rf $line; done
	
	## Check if the polypolish finished sucessfully
	Finished_polypolish_bin=`find $OutDIR/03-Polishing/Polypolish/ -name "*-polypolish.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	if [[ $Finished_polypolish_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] ; then
		echo "===========================================================================================================
		polypolish polishing finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		echo "*****************************************************
		polypolish parallel: $polypolish_para; polypolish threads: $polypolish_threads" ## should delete, only used in the test
	else
		echo "===========================================================================================================
		Something wrong with polypolish polishing, terminating...  @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

Num_polypolish_bin=`find $OutDIR/03-Polishing/Polypolish/ -name "*-polypolish.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
if [[ $Num_polypolish_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] ; then
	echo "===========================================================================================================
	polypolish polishing has been finished. Now go to the next stage: POLCA polishing @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/Polypolish ]]; then
		echo "===========================================================================================================
		polypolish polishing re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/Polypolish/*
	else
		echo "===========================================================================================================
		polypolish polishing starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing/Polypolish
	fi
	polypolish_polishing
fi

## POLCA polishing: polishing reads must be in fastq format
# sr_polca_polishing(){
polca_polishing(){
	if [[ $N_threads -gt 8 ]]; then
		polca_threads=8
		let polca_p=($N_threads+4)/8
		polca_para=$polca_p
	else
		polca_threads=N_threads
		polca_para=1
	fi
	
	## change directory to $OutDIR/03-Polishing/POLCA
	WorkDIR=`pwd`
	cd "$OutDIR"/03-Polishing/POLCA
	POLCA_PATH=`pwd`
	Polish_Path="`dirname \"$POLCA_PATH\"`"

	if [[ $sr_suffix == fa ]]; then
		echo "===========================================================================================================
		fasta to fastq reformatting starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//' 
		sr_suffix=fa
		## clean: add ow=t allow overwritting
		#rm -rf $Polish_Path/ShortSeqs/*-sr_*.fq
		## fake q value
		cat $Polish_Path/binIDs | while read line; do 
		echo -e "reformat.sh ow=t in=$Polish_Path/ShortSeqs/${line}-sr_1.${sr_suffix} in2=$Polish_Path/ShortSeqs/${line}-sr_2.${sr_suffix} out=$Polish_Path/ShortSeqs/${line}-sr_1.fq out2=$Polish_Path/ShortSeqs/${line}-sr_2.fq qfake=30"; done > $Polish_Path/POLCA/tmp.sr-fa2fq.cmd
		chmod +x $Polish_Path/POLCA/tmp.sr-fa2fq.cmd
		if [[ $N_threads -gt 8 ]]; then
			parallel -j8 -k < $Polish_Path/POLCA/tmp.sr-fa2fq.cmd
		else
			parallel -j$N_threads -k < $Polish_Path/POLCA/tmp.sr-fa2fq.cmd
		fi
		
		fq1_file=`ls $Polish_Path/ShortSeqs/*-sr_1.fq | wc -l`
		fq2_file=`ls $Polish_Path/ShortSeqs/*-sr_2.fq | wc -l`
		if [[ $fq1_file == $fq2_file ]] && [[ $fq2_file == `cat $Polish_Path/binIDs | wc -l` ]]; then
			echo "fa2fq reformatting finished sucessfully and continue polca polishing @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		else
			echo "Something wrong with fa2fq reformatting, terminating...  @`date "+%Y/%m/%d -- %H:%M:%S"`" |sed -e 's/^[ \t]*//'
			exit 1
		fi
	fi
	## run polca in individual folders
	cat $Polish_Path/binIDs | while read line; do mkdir -p $Polish_Path/POLCA/${line}-polca; done
	cat $Polish_Path/binIDs | while read line; do
	echo -e "cd $Polish_Path/POLCA/${line}-polca && polca.sh -a $Polish_Path/Polypolish/${line}-Polypolish/${line}-polypolish.fasta -r \"$Polish_Path/ShortSeqs/${line}-sr_1.fq $Polish_Path/ShortSeqs/${line}-sr_2.fq\" -t $polca_threads -m 2G && rm -rf $Polish_Path/POLCA/${line}-polca/${line}-polypolish.fasta.unSorted.sam && mv $Polish_Path/POLCA/${line}-polca/${line}-polypolish.fasta.PolcaCorrected.fa $Polish_Path/POLCA/${line}-polca.fasta"; done > $Polish_Path/POLCA/tmp.sr-polca.cmd
	chmod +x $Polish_Path/POLCA/tmp.sr-polca.cmd && parallel -j$polca_para -k < $Polish_Path/POLCA/tmp.sr-polca.cmd
	mkdir -p $Polish_Path/POLCA/POLCA-bins/ 
	
	## check if all bins have been polished sucessfully
	ls $Polish_Path/POLCA/*-polca.fasta 2>/dev/null | awk -F"/" '{print $NF}' | cut -d- -f1 | sort -t. -k2n > $Polish_Path/tmp.polca.sucessful.binID
	
	if [[ ! -s $Polish_Path/tmp.polca.sucessful.binID ]]; then
		echo "===========================================================================================================
		No POLCA-polished bins has been found, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1
	fi

	if [[ `wc -l $Polish_Path/tmp.polca.sucessful.binID | awk '{print $1}'` == `wc -l $Polish_Path/binIDs | awk '{print $1}'` ]]; then
		echo "===========================================================================================================
		All bins have been polished sucessfully by POLCA " | sed -e 's/^[ \t]*//'
		cat $Polish_Path/binIDs | while read line; do 
			mv $Polish_Path/POLCA/${line}-polca.fasta $Polish_Path/POLCA/POLCA-bins/; done
	else
		echo -e "===========================================================================================================
		Not all bins polished sucessfully by POLCA polishing
		Bins: [`comm -13 <(sort $Polish_Path/tmp.polca.sucessful.binID) <(sort $Polish_Path/binIDs) | sort -t. -k2n | tr '\n' '\t' | sed -e 's/\t$//g'`] did not work, it should have little effect, so using polypolish-polished bins instead" | sed -e 's/^[ \t]*//'
		comm -13 <(sort $Polish_Path/tmp.polca.sucessful.binID) <(sort $Polish_Path/binIDs) | while read line; do
			cp $Polish_Path/Polypolish/${line}-Polypolish/${line}-polypolish.fasta $Polish_Path/POLCA/POLCA-bins/${line}-polca.fasta; done
		cat $Polish_Path/tmp.polca.sucessful.binID | while read line; do
			mv $Polish_Path/POLCA/${line}-polca.fasta $Polish_Path/POLCA/POLCA-bins/; done
	fi
	## clean-up files: keep log file temp, should delete after debug
	ls $Polish_Path/POLCA/ | grep -v POLCA-bins | while read line; do rm -rf $line; done
	find $Polish_Path/Polypolish/ -name *fai | while read line; do rm -rf $line; done
	rm -rf $Polish_Path/tmp.polca.sucessful.binID
	cd $WorkDIR

	Fin_Num_polca_bin=`find $OutDIR/03-Polishing/POLCA/POLCA-bins/ -name "*-polca.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
	if [[ $Fin_Num_polca_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] ; then
		echo "===========================================================================================================
		polca polishing finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`
		and remove reformated fq files" | sed -e 's/^[ \t]*//'
		rm -rf $Polish_Path/ShortSeqs/*-sr_1.fq && rm -rf $Polish_Path/ShortSeqs/*-sr_2.fq
		echo "*****************************************************
		polca parallel: $polca_para; polca_threads: $polca_threads" ## should delete, only used in the test
	else
		echo "===========================================================================================================
		Something wrong with POLCA polishing, terminating...  @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}

Num_polca_bin=`find $OutDIR/03-Polishing/POLCA/POLCA-bins/ -name "*-polca.fasta" -exec ls -lht {} \; 2>/dev/null | awk '$5!=0' | awk '{print $9}' | wc -l`
if [[ $Num_polca_bin == `wc -l $OutDIR/03-Polishing/binIDs | awk '{print $1}'` ]] ; then
	echo "===========================================================================================================
	polca polishing has been finished. Now go to the next stage: bin quality assessement @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/POLCA ]]; then
		echo "===========================================================================================================
		polca polishing re-starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/POLCA/*
	else
		echo "===========================================================================================================
		polca polishing starts @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		mkdir -p $OutDIR/03-Polishing/POLCA
	fi
	polca_polishing
fi
}

## polca polished bin genome stats
hybrid_genome_stats(){
genome_stats(){
	cat $OutDIR/03-Polishing/binIDs | while read line; do cp $OutDIR/03-Polishing/POLCA/POLCA-bins/${line}-polca.fasta $OutDIR/03-Polishing/Final-bins/tmp-polca-bins/${line}.polca.fasta; done
	## checkm evaluation
	checkm lineage_wf -x fasta -t $N_threads $OutDIR/03-Polishing/Final-bins/tmp-polca-bins/ $OutDIR/03-Polishing/Final-bins/checkm-output >$OutDIR/03-Polishing/Final-bins/checkm.log
	sed -n '/------------/,$p' $OutDIR/03-Polishing/Final-bins/checkm.log | tail -n+4 | head -n -1 | awk '{print $1"\t"$13"\t"$14"\t"$15}' | awk '$2>=50 && $3<=10' > $OutDIR/03-Polishing/Final-bins/tmp.genome.completeness
	sed -n '/------------/,$p' $OutDIR/03-Polishing/Final-bins/checkm.log | tail -n+4 | head -n -1 | awk '{print $1"\t"$13"\t"$14"\t"$15}' | awk '$2>=50 && $3<=10 {print $1}' | while read line; do stats.sh $OutDIR/03-Polishing/Final-bins/tmp-polca-bins/${line}.fasta format=6 | grep -v "#" | awk '{print $3"\t"$1"\t"$9"\t"$18}'; done > $OutDIR/03-Polishing/Final-bins/tmp.genome-stats
	
	## check BBMap
	if [[ ! -s $OutDIR/03-Polishing/Final-bins/tmp.genome-stats ]]; then
		echo "===========================================================================================================
		Something wrong with BBMap::stats.sh, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1
	fi

	sed -n '/------------/,$p' $OutDIR/03-Polishing/Final-bins/checkm.log | tail -n+4 | head -n -1 | awk '{print $1"\t"$13"\t"$14"\t"$15}' | awk '$2>=50 && $3<=10 {print $1}' | while read line; do mv $OutDIR/03-Polishing/Final-bins/tmp-polca-bins/${line}.fasta $OutDIR/03-Polishing/Final-bins/ ; done
	paste $OutDIR/03-Polishing/Final-bins/tmp.genome.completeness $OutDIR/03-Polishing/Final-bins/tmp.genome-stats | sort -t. -k2n | sed -e 's/.polca//g' > $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary
	cat $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary | awk '{print $1"\t"$6}' | while read binID N_Contig; do
	## Add circular Info from flye assemblies
	if [[ $N_Contig == 1 ]]; then
		grep "^>" $OutDIR/03-Polishing/Final-bins/${binID}.polca.fasta | cut -d_ -f2-3 | while read ContigID; do grep -w $ContigID $OutDIR/01-LongAssemblies/assembly_info.txt ; done | awk '{print $4}' | while read CirInfo; do
		if [[ $CirInfo == Y ]]; then 
			echo "Y"
		else
			echo "N"
		fi; done
	else
		echo "N"
	fi; done | paste $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary - | sed -e '1i#BinID\tCompleteness\tContamination\tStrain heterogeneity\tGenomeSize(bp)\tN_Contig\tN50(bp)\tGC\tIfCir.' > $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary
	# clean up
	rm -rf $OutDIR/03-Polishing/Final-bins/tmp* && rm -rf $OutDIR/03-Polishing/Final-bins/checkm* && rm -rf $OutDIR/03-Polishing/tmp.NanoPhase.genome.summary 
	# rename files and contig names
	rename 's/\.polca//' $OutDIR/03-Polishing/Final-bins/*fasta
	ls $OutDIR/03-Polishing/Final-bins/*fasta | while read line; do sed -i 's/_polypolish//g' $line; done
	
	Fin_Num_final_bins=`ls -lht $OutDIR/03-Polishing/Final-bins/*fasta 2>/dev/null | awk '$5!=0' | wc -l`
	if [[ -s $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary ]] && [[ $Fin_Num_final_bins == `tail -n+2 $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary | wc -l | awk '{print $1}'` ]]; then
		echo "===========================================================================================================
        	Genome statistics finished sucessfully @`date "+%Y/%m/%d -- %H:%M:%S"`
		Final bins could be found in $OutDIR/03-Polishing/Final-bins/
		and bin summary file is $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary" | sed -e 's/^[ \t]*//'
		## clean up ShortSeqs and LongSeqs
		rm -rf $OutDIR/03-Polishing/ShortSeqs/ && rm -rf $OutDIR/03-Polishing/LongSeqs/
	else
		echo "===========================================================================================================
		Something wrong with genome statistics of polca-polished bins, terminating... @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		exit 1; >&2
	fi
}


Num_final_bins=`ls -lht $OutDIR/03-Polishing/Final-bins/*fasta 2>/dev/null | awk '$5!=0' | wc -l`
if [[ -s $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary ]] && [[ $Num_final_bins == `tail -n+2 $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary | wc -l | awk '{print $1}'` ]]; then
	echo "===========================================================================================================
	Seems genome quality summary file has been prepared in $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary and
	Final genomes could be found in $OutDIR/03-Polishing/Final-bins/
	If you want to re-run this step, please first remove [Fina-bins && summary file] by 'rm -rf $OutDIR/03-Polishing/Fina-bins' && 'rm -rf $OutDIR/03-Polishing/NanoPhase.hybrid.genome.summary'" | sed -e 's/^[ \t]*//'
else
	if [[ -d $OutDIR/03-Polishing/Final-bins/tmp-polca-bins ]]; then
		echo "===========================================================================================================
		re-prepare polca polished bins for checkm evaluation @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
		rm -rf $OutDIR/03-Polishing/Final-bins/tmp-polca-bins/*
	else
		if [[ -d $OutDIR/03-Polishing/Final-bins/ ]]; then
			echo "===========================================================================================================
			re-prepare polca polished bins for checkm evaluation @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			rm -rf $OutDIR/03-Polishing/Final-bins/*
		else
			echo "===========================================================================================================
			prepare polca polished bins for checkm evaluation @`date "+%Y/%m/%d -- %H:%M:%S"`" | sed -e 's/^[ \t]*//'
			mkdir -p $OutDIR/03-Polishing/Final-bins/
		fi
		mkdir -p $OutDIR/03-Polishing/Final-bins/tmp-polca-bins
	fi
	genome_stats
fi
}

## add hybrid function, and 16S function in the next update
if [[ $Type = long_read_only ]]; then
	echo "long_read_only model was selected, only Nanopore long reads will be used"
	
	if [[ -f $SR1_seqs ]] || [[ -f $SR2_seqs ]]; then
		echo "It seems you are using long_read_only model, but provided short reads at the same time. If short reads were involved, please use [--hybrid] parameter, or remove short reads in the command; terminating..."
		show_help; exit 1; fi
	long_read_check
	## long-read-only model
	package_check && long_read_only_strategy && long_read_only_genome_stats && echo
elif [[ $Type = hybrid ]]; then
	echo "hybrid model was selected, both long and short reads will be used"
	
	if [[ -f $SR1_seqs ]] && [[ ! -f $SR2_seqs ]]; then
		echo "PE#1 has been found; but cannot find short-read PE#2 file, terminating..."
		show_help; exit 1
	elif [[ ! -f $SR1_seqs ]] && [[ -f $SR2_seqs ]]; then
		echo "PE#2 has been found, but cannot find short-read PE#1 file, terminating..."
		show_help; exit 1
	elif [[ ! -f $SR1_seqs ]] && [[ ! -f $SR2_seqs ]]; then
		echo "Cannot find short-read PE#1 and PE#2 files, terminating..."
		show_help; exit 1
	elif [[ $SR1_seqs == $SR2_seqs ]] && [[ -f $SR1_seqs ]]; then
		echo "Provided paired-end files were the same, please check, terminating..."
		show_help; exit 1
	elif [[ -f $SR1_seqs ]] && [[ -f $SR2_seqs ]]; then
		if [[ $SR1_seqs == *_1.fasta ]] && [[ $SR2_seqs == *_2.fasta ]]; then
			sr_suffix=fa
			echo "===========================================================================================================
			Paired-end fasta files have been provided, as fastq files were required for POLCA polishing, so a quality value of 30 will be used for fasta to fastq reformattings" | sed -e 's/^[ \t]*//'
			long_read_check
			echo "===========================================================================================================
			Seems both short- and long-read files were prepared well. Now go to the next stage: package avaiablity checking" | sed -e 's/^[ \t]*//'
			## hybrid strategy but without polca polishing
			package_check && long_read_only_strategy && sr_polypolish_polca_polishing && hybrid_genome_stats && echo
		elif [[ $SR1_seqs == *_1.fa ]] && [[ $SR2_seqs == *_2.fa ]]; then
			sr_suffix=fa
			echo "===========================================================================================================
			Paired-end fasta files have been provided, as fastq files were required for POLCA polishing, so a quality value of 30 will be used for fasta to fastq reformattings" | sed -e 's/^[ \t]*//'
			long_read_check
			echo "===========================================================================================================
			Seems both short- and long-read files have been prepared well. Now go to the next stage: package avaiablity checking" | sed -e 's/^[ \t]*//'
			package_check && long_read_only_strategy && sr_polypolish_polca_polishing && hybrid_genome_stats && echo
		elif [[ $SR1_seqs == *_1.fastq ]] && [[ $SR2_seqs == *_2.fastq ]]; then
			sr_suffix=fq
			echo "===========================================================================================================
			Paired-end fastq files have been provided" | sed -e 's/^[ \t]*//'
			long_read_check
			echo "===========================================================================================================
			Seems both short- and long-read files have been prepared well. Now go to the next stage: package avaiablity checking" | sed -e 's/^[ \t]*//'
			## full-stage hybrid strategy
			package_check && long_read_only_strategy && sr_polypolish_polca_polishing && hybrid_genome_stats && echo
		elif [[ $SR1_seqs == *_1.fq ]] && [[ $SR2_seqs == *_2.fq ]]; then
                        sr_suffix=fq
                        echo "===========================================================================================================
                        Paired-end fastq files have been provided" | sed -e 's/^[ \t]*//'
                        long_read_check
                        echo "===========================================================================================================
                        Seems both short- and long-read files have been prepared well. Now go to the next stage: package avaiablity checking" | sed -e 's/^[ \t]*//'
                        ## full-stage hybrid strategy
                        package_check && long_read_only_strategy && sr_polypolish_polca_polishing && hybrid_genome_stats && echo
		else
			echo "===========================================================================================================
			Please check the type of input short-read files and its name extension should be like: _1.fastq/fq and _1.fasta/fa; _2.fastq/fq and _2.fasta/fa" | sed -e 's/^[ \t]*//'
			show_help; exit 1
		fi
	else
		echo "short-read files cannot be found, terminating..."
		show_help; exit 1
	fi
	
else
	echo "strategy was wrong in the command, please check, terminating..."
	show_help; exit 1
fi

echo "===========================================================================================================
NanoPhase finished @`date "+%Y/%m/%d -- %H:%M:%S"`
Have a nice day!"
printf "\n"

elif [[ $check_pkg == true ]]; then
        echo "===========================================================================================================
        Check software availability and locations" ## should check unavailable: if xxx then echo ""; exit 1
        rm -rf .package.installed 2>/dev/null && rm -rf .package.not.installed 2>/dev/null

        echo -e "flye\nmetabat2\nrun_MaxBin.pl\nmetawrap\ncheckm\nracon\nmedaka\npolypolish\npolca.sh\nbwa\nseqtk\nminimap2\nstats.sh\nparallel\nperl\nsamtools" | while read package; do
        if [[ "$(command -v $package)" ]]; then
                echo -e "$package\t`which $package`" | sed -e 's/polca.sh/POLCA/1' -e 's/run_MaxBin.pl/maxbin2/1' -e 's/stats.sh/BBMap/g' | awk '{printf "%-20s %s\n", $1,$2}' >> .package.installed
        else
                echo "$package" | sed -e 's/polca.sh/POLCA/1' -e 's/run_MaxBin.pl/maxbin2/1' -e 's/stats.sh/BBMap/g' | awk '{printf "%-20s %s\n", $1,$2}' >> .package.not.installed
        fi ; done

        if [[ -s .package.installed ]]; then
                echo "===========================================================================================================
                The following packages have been found  @`date "+%Y/%m/%d -- %H:%M:%S"`"
                cat .package.installed | sed -e '1i#package\tlocation' | awk '{printf "%-20s %s\n", $1,$2}'
                echo "==========================================================================================================="
        else
                echo "No required package has been found in the environment, please install, terminating..."
                exit 1
        fi

        if [[ ! -s .package.not.installed ]]; then
                echo "All required packages have been found in the environment"
                path_check=`cat .package.installed | awk '{printf "%-20s %s\n", $1,$2}' | awk '{print $2}' | while read path; do dirname $path; done | awk '!a[$1]++' | wc -l`
                if [[ $path_check -gt 1 ]]; then
                        echo "Warning: [`cat .package.installed | awk '{printf "%-20s %s\n", $1,$2}' | awk '{print $2}' | while read path; do dirname $path; done | grep -v 'NanoPhase\/bin' | while read line; do grep -w $line .package.installed; done | awk '!a[$1]++ {print $1}' | tr '\n' ' ' | sed -e 's/ $//g'`] has not been installed in the [NanoPhase] env. Strongly recommend intalling all packages in the NanoPhase env, or it may result in a failure"
                        rm -rf .package.installed
                fi
        else
                echo "Error: [`cat .package.not.installed | sed -e 's/ //g' | tr '\n' ' ' | sed -e 's/ $//g'`] cannot be found in the environment, please install. Now terminating..."
                rm -rf .package.not.installed && rm -rf .package.installed
        fi
fi


