#!/usr/bin/env bash
## nanophase (args) is designed for identifying the potential Antobiotic Resistance Genes (ARGs) from the reconstructed MAGs (Currently by nanophase)
set -eo pipefail


###### Usage ######
show_help(){
cat << EOF
`echo "nanophase v=$VERSION"`

arguments:
        -i, --input	        input directory containing genome files
	-x, --extension		genomes extension [default: fasta]
	-o, --output		output file name [default: nanophase.ARGs.summary.txt]
	-s, --similarity	the similarity cutoff for blastp to search the SARG database (%) [default: 70]
	-c, --coverage		the coverage cutoff for blastp alignment fraction (%) [default: 70]
	-t, --threads           number of threads [default: 16]
        -h, --help              print help information and exit
        -v, --version           show version number and exit
	--download		download or update SARG database

example usage:
        nanophase args -i Final-bins -x fasta -o nanophase.ARGs.summary.txt	## ARGs identification

EOF
}


## default parameters
OPTIND=1 # Reset in case getopts has been used previously in the shell

VERSION="0.2.1"
bin_suffix=fasta
N_threads="16"
#input_folder="Final-bins/"
output_file="nanophase.ARGs.summary.txt"
similarity="70"
coverage="70"
download="no"

## log file
datetime.CHECK(){ Date=`date "+%Y-%m-%d %H:%M:%S"`; echo [$Date] CHECK:; }
#datetime.TASK(){ Date=`date "+%Y-%m-%d %H:%M:%S"`; echo [$Date] TASK:; }
datetime.INFO(){ Date=`date "+%Y-%m-%d %H:%M:%S"`; echo [$Date] INFO:; }
#datetime.WARNING(){ Date=`date "+%Y-%m-%d %H:%M:%S"`; echo [$Date] WARNING:; }
datetime.ERROR(){ Date=`date "+%Y-%m-%d %H:%M:%S"`; echo [$Date] ERROR:; }
datetime.DONE(){ Date=`date "+%Y-%m-%d %H:%M:%S"`; echo [$Date] DONE:; }

## call command to tmp_cmd
tmp_cmd=`echo -e "\nCommand line: $CRTDIR/nanophase args $*"`
##
params="$(getopt -o hi:t:s:c:o:x:v --long help,input:,threads:,similarity:,coverage:,out:,extension:,download,version -- "$@")"
if [[ $? -gt 0 ]]; then show_help; exit 1; fi
if [[ $# == 0 ]]; then show_help; exit 1; fi

#eval set -- "$params"
#unset params

while true; do
        case "$1" in
		-t | --threads) N_threads=$2; shift 2;;
		-i | --input) input_folder=$2; shift 2;;
		-o | --out) output_file=$2; shift 2;;
		-x | --extension) bin_suffix=$2; shift 2;;
		-s | --similarity) similarity=$2; shift 2;;
		-c | --coverage) coverage=$2; shift 2;;
		--download) download=yes; shift 1;;
		-v | --version) echo "nanophase v=$VERSION"; exit 0; shift; break;;
		-h | --help) show_help; exit 0; shift 1;;
		--) show_help; exit 0; shift; break ;;
		*) break;;
	esac
done
###

## package check (blastp)
package_check(){
### Software availability
echo  "`datetime.CHECK` Check software availability and locations"
rm -rf .package.installed 2>/dev/null && rm -rf .package.not.installed 2>/dev/null

## all required packages
echo -e "nanophase\nblastp" | while read package; do
if [[ "$(command -v $package)" ]]; then
        echo -e "$package\t`which $package`" | awk '{printf "%-20s %s\n", $1,$2}' >> .package.installed
else
        echo "$package" | awk '{printf "%-20s %s\n", $1,$2}' >> .package.not.installed
fi ; done

if [[ -s .package.installed ]]; then
        echo "`datetime.INFO` The following packages have been found. If the above certain packages integrated into nanophase were used in your investigation, please give them credit as well :)"
        cat .package.installed | sed -e '1i#package\tlocation' | awk '{printf "%-20s %s\n", $1,$2}'
else
        echo "`datetime.ERROR` No required package has been found in the environment, please install, terminating..."
        exit 1
fi

if [[ ! -s .package.not.installed ]]; then
        echo "All required packages have been found in the environment"
        path_check=`cat .package.installed | awk '{printf "%-20s %s\n", $1,$2}' | awk '{print $2}' | while read path; do dirname $path; done | awk '!a[$1]++' | wc -l`
        if [[ $path_check -gt 1 ]]; then
                echo "Warning: [`cat .package.installed | awk '{printf "%-20s %s\n", $1,$2}' | awk '{print $2}' | while read path; do dirname $path; done | grep -v 'nanophase\/bin' | while read line; do grep -w $line .package.installed; done | awk '!a[$1]++ {print $1}' | tr '\n' ' ' | sed -e 's/ $//g'`] has not been installed in the [nanophase] env. Strongly recommend installing all packages in the nanophase env, or it may result in a failure"
                rm -rf .package.installed
        else
                rm -rf .package.installed 2>/dev/null
        fi
else
        echo "`datetime.ERROR` [`cat .package.not.installed | sed -e 's/ //g' | tr '\n' ' ' | sed -e 's/ $//g'`] cannot be found in the environment, plase install. Now terminating..."
        rm -rf .package.not.installed
        exit 1
fi

}
## End of package check

## SARG database check
db_check(){
echo "`datetime.CHECK` Check SARG databse availability and locations"
db_dir=$(dirname `which nanophase`)
SARG_db_check=`ls $db_dir/SARG.fasta* 2>/dev/null | wc -l`
SARG_index_check=`ls $db_dir/*component_structure.txt 2>/dev/null | wc -l`

if [[ $SARG_db_check -gt 1 ]] && [[ $SARG_index_check -eq 3 ]]; then
	echo -e "`datetime.INFO` SARG database and structure files were found in $(dirname `which nanophase`)\n"
else
	echo "`datetime.ERROR` SARG database could not found. To fix this error, try 'nanophase args --download', terminating..."
	exit 1
fi

}
## End of database check

### download databse ###
if [[ $download = yes ]]; then
        echo "`datetime.INFO` prepare download SARG database"
	cd $(dirname `which nanophase`)
        wget https://raw.githubusercontent.com/xinehc/args_oap/main/args_oap/DB/SARG.fasta
        wget https://raw.githubusercontent.com/xinehc/args_oap/main/args_oap/DB/multi-component_structure.txt
        wget https://raw.githubusercontent.com/xinehc/args_oap/main/args_oap/DB/single-component_structure.txt
        wget https://raw.githubusercontent.com/xinehc/args_oap/main/args_oap/DB/two-component_structure.txt
        makeblastdb -dbtype prot -in SARG.fasta
        cd - && db_check
        exit
fi
## End of download database

####################
## start to run
echo "`datetime.INFO` nanophase (args) starts"
echo `datetime.INFO` $tmp_cmd
package_check && db_check
####################

## check input MAGs
if [[ -d $input_folder ]]; then
	if [[ `ls $input_folder/*${bin_suffix} 2>/dev/null | wc -l` -gt 0 ]]; then
		if [[ $bin_suffix == fasta ]]; then
			num_bins=`ls $input_folder/*fasta | wc -l`
		elif [[ $bin_suffix == fa ]]; then
			num_bins=`ls $input_folder/*fa | wc -l`
		elif [[ $bin_suffix == fna ]]; then
			num_bins=`ls $input_folder/*fna | wc -l`
		fi
		echo "`datetime.CHECK` $num_bins MAGs were found in the folder of $input_folder"
	else
		echo "`datetime.ERROR` No MAGs could be found in the folder of $input_folder, terminating..."
	fi
else
	echo "`datetime.ERROR` Cannot found the folder $input_folder, terminating..."
	exit 1; >&2
fi
## End of check input MAGs

## define input and output
base_dir=$(cd `dirname $0`; pwd)
rp_input_folder=`realpath $input_folder`
#output_folder=`dirname $rp_input_folder`

##
if [[ -d $rp_input_folder/tmp-ARGs ]]; then
	rm -rf $rp_input_folder/tmp-ARGs && mkdir $rp_input_folder/tmp-ARGs
else
	mkdir -p $rp_input_folder/tmp-ARGs
fi

##
echo "`datetime.INFO` Run prodigal to predict ORFs (be patient)"
ls $rp_input_folder/*${bin_suffix} | awk -F"/" '{print $NF}' | xargs -P $N_threads -I {} prodigal -a $rp_input_folder/tmp-ARGs/{}.faa -i $rp_input_folder/{} -q 1>/dev/null

if [[ $N_threads -gt 6 ]]; then
	blastp_threads=6
	let arg_para=($N_threads+3)/6
	N_threads_arg=$arg_para
else
	blastp_threads=$N_threads
	N_threads_arg=1
fi

echo "`datetime.INFO` Blast to SARG database for ARGs identification (be patient)"
ls $rp_input_folder/tmp-ARGs/*faa | awk -F"/" '{print $NF}' | xargs -P $N_threads_arg -I {} blastp -query $rp_input_folder/tmp-ARGs/{} -evalue 1e-5 -max_target_seqs 5 -num_threads $blastp_threads -db $base_dir/SARG.fasta -outfmt "6 qseqid sseqid pident length mismatch gapopen qstart qend sstart send evalue bitscore qcovs" -out $rp_input_folder/tmp-ARGs/{}.tmp.blast6.out

echo "`datetime.INFO` Summarize the result"
cat $rp_input_folder/tmp-ARGs/*.tmp.blast6.out | awk '!a[$1]++' | awk '$3>="'$similarity'" && $NF>="'$coverage'" {print $1"\t"$3"\t"$2}' | while read line1 line2 line3; do paste <(echo -e $line1"\t"$line2) <(grep $line3 $base_dir/*-component_structure.txt); done | sed -e 's/two-component system//g' -e 's/multicomponent system//g' -e 's/_structure.txt:/ system/g' | cat <(paste <(echo -e "BinID_ContigID_OrfID\tsimilarity") <(head -1 $base_dir/single-component_structure.txt)) - | awk -F"\t" -v OFS="\t" '{$3=""; $4=""; $(NF-2)=""; $(NF-1)=""; $NF=""; print $0}' | sed -e 's/\t\t\t/\t/g' >$output_file

if [[ `tail -n+2 $output_file | wc -l` -gt 1 ]]; then
	echo "`datetime.DONE` ARGs identifiation from MAGs finished"
	rm -rf $rp_input_folder/tmp-ARGs
elif [[ `cat $output_file | wc -l` == 1 ]]; then
	echo "`datetime.DONE` ARGs identifiation from MAGs finished, but no ARG was identified. Maybe try to lower the screening criteria (but be cautious with the new results)"
	rm -rf $rp_input_folder/tmp-ARGs && rm -rf $output_file
fi
echo -e "`datetime.DONE` nanophase (args) finished and have a nice day!\n"

